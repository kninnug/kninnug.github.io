{"version":3,"sources":["SDPMinimizer.ts","App.tsx","index.tsx"],"names":["dvSetString","dv","off","str","length","Error","setUint8","i","chr","charCodeAt","charAt","dvSetBuffer","buf","vd","DataView","byteLength","getUint8","dvGetString","len","ret","String","fromCharCode","compressSDP","desc","obj","sessionVersion","candidates","map","c","foundation","isNaN","havePort","port","isRtcp","component","isTcp","transport","isSrflx","type","isTcpActive","tcptype","ip","raddr","buffer","ArrayBuffer","view","setUint32","setUint16","rport","sessionId","protocol","shortProtocol","toUpperCase","fingerprint","split","hex","parseInt","iceFrag","iceUfrag","icePwd","reduce","a","b","maxMessageSize","crunchSDP","sdp","origin","media","m","fp","sort","priority","idx","toLowerCase","undefined","hash","deflateSDP","btoa","Uint8Array","decompressSDP","head","numCandidates","getUint16","Array","fill","_","toString","padStart","join","whichProtocol","cand","getUint32","push","expandSDP","from","atob","stringToBuf","version","username","netType","ipVer","address","name","timing","start","stop","groups","mids","msidSemantic","semantic","token","direction","rtp","fmtp","payloads","connection","endOfCandidates","iceOptions","setup","stcpPort","mid","stringify","val","JSON","idSDP","ICE_SERVERS","urls","RTC","iceServers","conn","channel","mode","isReady","send","RTCPeerConnection","this","Promise","reject","resolve","chan","createDataChannel","onopen","evt","bind","console","log","emit","onmessage","data","onicecandidate","candidate","localDescription","createOffer","then","setLocalDescription","catch","offer","ondatachannel","RTCSessionDescription","setRemoteDescription","createAnswer","answer","TypedEmitter","AsHost","props","useState","rtc","refUrl","useRef","refCode","localDesc","setLocalDesc","remoteDesc","setRemoteDesc","errorMsg","setErrorMsg","setIsReady","useEffect","initiate","handler","on","accept","ex","error","Chat","style","display","flexFlow","flex","ref","value","code","url","URL","window","location","href","toURL","onClick","current","select","onChange","document","execCommand","focus","target","AsClient","localDate","d","fix","n","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","message","time","Date","rando","Math","random","setLog","nextMessage","setNextMessage","refLastLog","refTxtInput","msg","addMessage","parse","key","onerror","scrollIntoView","height","width","maxWidth","justifyContent","margin","wordBreak","textIndent","paddingLeft","toISOString","onKeyUp","App","substr","decodeURIComponent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27162689.chunk.js","sourcesContent":["import * as sdp from 'sdp-transform';\r\n//import * as base2048 from 'base2048';\r\n\r\nfunction bufToString(buf: ArrayBuffer){\r\n    return btoa(String.fromCharCode(...new Uint8Array(buf)));\r\n    //return base2048.encode(new Uint8Array(buf));\r\n}\r\nfunction stringToBuf(str: string){\r\n    return Uint8Array.from(atob(str), c => c.charCodeAt(0)).buffer;\r\n    //return base2048.decode(str).buffer;\r\n}\r\nfunction dvSetString(dv: DataView, off: number, str: string){\r\n    if(str.length > 255){\r\n        throw new Error(\"String too long: \" + str.length);\r\n    }\r\n    dv.setUint8(off, str.length);\r\n    for(let i = 0; i < str.length; i++){\r\n        const chr = str.charCodeAt(i);\r\n        if(chr > 255){\r\n            throw new Error(\"Not an ASCII character: \" + str.charAt(i));\r\n        }\r\n        dv.setUint8(off + 1 + i, chr);\r\n    }\r\n    return off + 1 + str.length;\r\n}\r\nfunction dvSetBuffer(dv: DataView, off: number, buf: ArrayBuffer){\r\n    const vd = new DataView(buf);\r\n    for(let i = 0; i < buf.byteLength; i++){\r\n        dv.setUint8(off + i, vd.getUint8(i));\r\n    }\r\n    return off + buf.byteLength;\r\n}\r\nfunction dvGetString(dv: DataView, off: number){\r\n    const len = dv.getUint8(off);\r\n    let ret = '';\r\n    for(let i = 0; i < len; i++){\r\n        const chr = dv.getUint8(off + 1 + i);\r\n        ret += String.fromCharCode(chr);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport interface MinimumSDP {\r\n    type: 'offer' | 'answer';\r\n    sessionId: string;\r\n    sessionVersion: number;\r\n    port: number;\r\n    protocol: string;\r\n    candidates: {\r\n        foundation: number;\r\n        component: 1 | 2;\r\n        transport: \"tcp\" | \"udp\";\r\n        ip: string;\r\n        port?: number;\r\n        type: 'host' | 'srflx';\r\n        raddr?: string;\r\n        rport?: number;\r\n        tcptype?: 'active' | 'passive'\r\n    }[];\r\n    iceUfrag: string;\r\n    icePwd: string;\r\n    fingerprint: string;\r\n    maxMessageSize: number;\r\n}\r\n\r\nexport function deflateSDP(desc: RTCSessionDescriptionInit): MinimumSDP {\r\n    if(!desc.sdp){\r\n        throw new Error(\"No SDP\");\r\n    }\r\n    if(desc.type !== 'answer' && desc.type !== 'offer'){\r\n        throw new Error(\"Unexpected RTC init type: \" + desc.type);\r\n    }\r\n    const obj = sdp.parse(desc.sdp);\r\n    if(!obj.origin){\r\n        throw new Error(\"Incomplete SDP: no origin\");\r\n    }\r\n    if(!obj.media || !obj.media.length){\r\n        throw new Error(\"Incomplete SDP: no/zero-length media\");\r\n    }\r\n    if(obj.media.length > 1){\r\n        throw new Error(\"Too much SDP: more than 1 media\");\r\n    }\r\n    const m = obj.media[0],\r\n        fp = m.fingerprint || obj.fingerprint;\r\n    if(!m.candidates){\r\n        throw new Error(\"Incomplete SDP.media: no candidates\");\r\n    }\r\n    if(!fp){\r\n        throw new Error(\"Incomplete SDP: no fingerprint\");\r\n    }\r\n    if(fp.type !== 'sha-256'){\r\n        throw new Error(\"Unexpected fingerprint type: \" + fp.type);\r\n    }\r\n    if(!m.iceUfrag){\r\n        throw new Error(\"Incomplete SDP: no ice-ufrag\");\r\n    }\r\n    if(!m.icePwd){\r\n        throw new Error(\"Incomplete SDP: no ice-pwd\");\r\n    }\r\n    return {\r\n        type: desc.type,\r\n        sessionId: ''+obj.origin.sessionId,\r\n        sessionVersion: obj.origin.sessionVersion,\r\n        port: m.port,\r\n        protocol: m.protocol,\r\n        candidates: m.candidates.sort((a, b) => (+a.priority) - (+b.priority)).map((c, idx) => {\r\n            if(c.component !== 1 && c.component !== 2){\r\n                throw new Error(\"Unexpected value for candidate component: \" + c.component);\r\n            }\r\n            const transport = c.transport.toLowerCase();\r\n            if(transport !== 'tcp' && transport !== 'udp'){\r\n                throw new Error(\"Unexpected value for candidate transport: \" + c.transport);\r\n            }\r\n            if(c.type !== 'host' && c.type !== 'srflx'){\r\n                throw new Error(\"Unexpected value for candidate type: \" + c.type);\r\n            }\r\n            if(c.tcptype !== undefined && c.tcptype !== 'active' && c.tcptype !== 'passive'){\r\n                throw new Error(\"Unexpected value for candidate tcp-type: \" + c.tcptype);\r\n            }\r\n            return {\r\n                foundation: +c.foundation,\r\n                component: c.component,\r\n                transport: transport,\r\n                ip: c.ip,\r\n                port: c.port === m.port ? undefined : c.port,\r\n                type: c.type,\r\n                raddr: c.raddr,\r\n                rport: c.rport,\r\n                tcptype: c.tcptype as 'active' | 'passive' | undefined\r\n            };\r\n        }),\r\n        iceUfrag: m.iceUfrag,\r\n        icePwd: m.icePwd,\r\n        fingerprint: fp.hash,\r\n        // @ts-ignore: m.maxMessageSize does exist\r\n        maxMessageSize: m.maxMessageSize\r\n    }\r\n}\r\nexport function crunchSDP(obj: MinimumSDP){\r\n    if(obj.sessionVersion > 7){\r\n        throw new Error(\"sessionVersion too high: \" + obj.sessionVersion);\r\n    }\r\n    if(obj.candidates.length > 15){\r\n        throw new Error(\"Too many candidates: \" + obj.candidates.length);\r\n    }\r\n    const candidates = obj.candidates.map(c => {\r\n        const foundation = +c.foundation;\r\n        if(isNaN(foundation) || foundation > 2**32 - 1){\r\n            throw new Error(\"Foundation too big: \" + c.foundation);\r\n        }\r\n        const havePort = !!c.port,\r\n            isRtcp = c.component === 2,\r\n            isTcp = c.transport === 'tcp',\r\n            isSrflx = c.type === 'srflx',\r\n            isTcpActive = c.tcptype === 'active',\r\n            len = 1 + 4 + (c.ip.length + 1) +\r\n                (+havePort ? 2 : 0) +\r\n                (isSrflx ? (c.raddr!.length + 1) + 2 : 0),\r\n            buffer = new ArrayBuffer(len),\r\n            view = new DataView(buffer);\r\n        view.setUint8(0, +havePort | (+isRtcp << 1) | (+isTcp << 2) | (+isSrflx << 3) | (+isTcpActive << 4));\r\n        view.setUint32(1, foundation);\r\n        let off = dvSetString(view, 5, c.ip);\r\n        if(c.port){\r\n            view.setUint16(off, c.port);\r\n            off += 2;\r\n        }\r\n        if(isSrflx){\r\n            off = dvSetString(view, off, c.raddr!);\r\n            view.setUint16(off, c.rport!);\r\n        }\r\n\r\n        return buffer;\r\n    });\r\n    const sessionId = '' + obj.sessionId,\r\n        protocol = '' + obj.protocol,\r\n        shortProtocol = protocol.toUpperCase() === \"UDP/DTLS/SCTP\" || protocol.toUpperCase() === \"TCP/DTLS/SCTP\",\r\n        fingerprint = obj.fingerprint.split(':').map(hex => parseInt(hex, 16)),\r\n        iceFrag = obj.iceUfrag,\r\n        icePwd = obj.icePwd,\r\n        len = 1 + 2 + 32 + 2 + \r\n            sessionId.length + 1 + \r\n            (+!shortProtocol * protocol.length) + 1 + \r\n            iceFrag.length + 1 + \r\n            icePwd.length + 1 +\r\n            candidates.reduce((a, c) => a + c.byteLength, 0),\r\n        buffer = new ArrayBuffer(len),\r\n        view = new DataView(buffer);\r\n    view.setUint8(0, +(obj.type === 'answer') | ((obj.sessionVersion & 7) << 1) | ((candidates.length & 15) << 4));\r\n    view.setUint16(1, obj.port);\r\n    let off = 3;\r\n    for(const b of fingerprint){\r\n        view.setUint8(off++, b);\r\n    }\r\n    view.setUint16(off, obj.maxMessageSize);\r\n    off += 2;\r\n    off = dvSetString(view, off, sessionId);\r\n    if(protocol.toUpperCase() === \"UDP/DTLS/SCTP\"){\r\n        view.setUint8(off, 0);\r\n        off += 1;\r\n    }else if(protocol.toUpperCase() === \"TCP/DTLS/SCTP\"){\r\n        view.setUint8(off, 1);\r\n        off += 1;\r\n    }else{\r\n        off = dvSetString(view, off, protocol);\r\n    }\r\n    off = dvSetString(view, off, iceFrag);\r\n    off = dvSetString(view, off, icePwd);\r\n    for(const can of candidates){\r\n        off = dvSetBuffer(view, off, can);\r\n    }\r\n\r\n    return buffer;\r\n}\r\nexport function inflateSDP(obj: MinimumSDP): RTCSessionDescriptionInit {\r\n    return {\r\n        type: obj.type,\r\n        sdp: sdp.write({\r\n            version: 0,\r\n            origin: {\r\n                username: \"-\",\r\n                sessionId: obj.sessionId,\r\n                sessionVersion: obj.sessionVersion,\r\n                netType: 'IN',\r\n                ipVer: 4,\r\n                address: '127.0.0.1'\r\n            },\r\n            name: '-',\r\n            timing: {\r\n                start: 0,\r\n                stop: 0\r\n            },\r\n            groups: [{\r\n                type: 'BUNDLE',\r\n                mids: '0'\r\n            }],\r\n            msidSemantic: {\r\n                semantic: '',\r\n                token: 'WMS'\r\n            },\r\n            media: [{\r\n                direction: 'sendrecv',\r\n                rtp: [],\r\n                fmtp: [],\r\n                type: 'application',\r\n                port: obj.port,\r\n                protocol: obj.protocol,\r\n                payloads: 'webrtc-datachannel',\r\n                connection: {\r\n                    version: 4,\r\n                    ip: '127.0.0.1'\r\n                },\r\n                candidates: obj.candidates.map((c, idx) => ({\r\n                    foundation: '' + c.foundation,\r\n                    component: c.component,\r\n                    transport: c.transport,\r\n                    priority: idx,\r\n                    ip: c.ip,\r\n                    port: c.port ?? obj.port,\r\n                    type: c.type,\r\n                    raddr: c.raddr ?? undefined,\r\n                    rport: c.rport ?? undefined,\r\n                    tcptype: c.transport === 'tcp' ? c.tcptype : undefined\r\n                })),\r\n                endOfCandidates: 'end-of-candidates',\r\n                iceUfrag: obj.iceUfrag,\r\n                icePwd: obj.icePwd,\r\n                // @ts-ignore\r\n                iceOptions: 'trickle',\r\n                fingerprint: {\r\n                    type: 'sha-256',\r\n                    hash: obj.fingerprint\r\n                },\r\n                setup: obj.type === 'offer' ? 'actpass' : 'active',\r\n                stcpPort: 5000,\r\n                mid: '0',\r\n                maxMessageSize: obj.maxMessageSize\r\n            }],\r\n        })+'a=sctp-port:5000\\r\\n'\r\n    };\r\n}\r\nexport function expandSDP(buf: ReturnType<typeof crunchSDP>): MinimumSDP {\r\n    /*\r\n    ( type: 1 bit: 'offer' | 'answer'\r\n    sessionVersion: 3 bits\r\n    numCandidates: 4 bits ) : 1 byte\r\n    port: 2 bytes (uint16)\r\n    fingerprint: 32 bytes\r\n    maxMessageSize: 2 bytes (uint16)\r\n    sessionId: string: length+1 bytes\r\n    protocol: 1 byte (0 | 1) | string: length+1 bytes\r\n    iceFrag: string: length+1 bytes\r\n    icePwd: string: length+1 bytes\r\n    candidates: [\r\n        ( havePort: 1 bit\r\n        component: 1 bit: 1 | 2\r\n        transport: 1 bit: 'UDP' | 'TCP'\r\n        type: 1 bit: 'host' | 'srflx'\r\n        tcptype: 1 bit: 'active' | 'passive' ): 1 byte\r\n        foundation: 4 bytes (uint32)\r\n        ip: string: length+1 bytes\r\n        port: 0 | 2 bytes\r\n        raddr: 0 | string: length+1 bytes\r\n        rport: 0 | 2 bytes (uint16)\r\n    ]\r\n    */\r\n    let off = 0;\r\n    const view = new DataView(buf),\r\n        head = view.getUint8(off++),\r\n        type = (head & 1) ? 'answer' : 'offer',\r\n        sessionVersion = (head >> 1) & 7,\r\n        numCandidates = (head >> 4) & 15,\r\n        port = view.getUint16(1);\r\n    off += 2;\r\n    const fingerprint = new Array(32).fill(0).map((_, idx) => view.getUint8(off + idx).toString(16).padStart(2, '0').toUpperCase()).join(':');\r\n    off += 32;\r\n    const maxMessageSize = view.getUint16(off);\r\n    off += 2;\r\n    const sessionId = dvGetString(view, off);\r\n    off += sessionId.length + 1;\r\n    const whichProtocol = view.getUint8(off);\r\n    let protocol = undefined;\r\n    if(whichProtocol === 0){\r\n        protocol = \"UDP/DTLS/SCTP\";\r\n        off++;\r\n    }else if(whichProtocol === 1){\r\n        protocol = \"TCP/DTLS/SCTP\";\r\n        off++;\r\n    }else{\r\n        protocol = dvGetString(view, off);\r\n        off += protocol.length + 1;\r\n    }\r\n    const iceUfrag = dvGetString(view, off);\r\n    off += iceUfrag.length + 1;\r\n    const icePwd = dvGetString(view, off);\r\n    off += icePwd.length + 1;\r\n\r\n    const candidates: MinimumSDP['candidates'] = [];\r\n    for(let i = 0; i < numCandidates; i++){\r\n        const cand: Partial<MinimumSDP['candidates'][0]> = {},\r\n            head = view.getUint8(off++),\r\n            havePort = head & 1;\r\n        cand.component = (head >> 1) & 1 ? 2 : 1;\r\n        cand.transport = (head >> 2) & 1 ? 'tcp' : 'udp';\r\n        cand.type = (head >> 3) & 1 ? 'srflx' : 'host';\r\n        cand.tcptype = (head >> 4) & 1 ? 'passive' : 'active';\r\n        cand.foundation = view.getUint32(off);\r\n        off += 4;\r\n        cand.ip = dvGetString(view, off);\r\n        off += cand.ip.length + 1;\r\n        if(havePort){\r\n            cand.port = view.getUint16(off);\r\n            off += 2;\r\n        }\r\n        if(cand.type === 'srflx'){\r\n            cand.raddr = dvGetString(view, off);\r\n            off += cand.raddr.length + 1;\r\n            cand.rport = view.getUint16(off);\r\n            off += 2;\r\n        }\r\n\r\n        candidates.push(cand as typeof candidates[0]);\r\n    }\r\n\r\n    return {\r\n        type,\r\n        sessionId,\r\n        sessionVersion,\r\n        port,\r\n        protocol,\r\n        iceUfrag,\r\n        icePwd,\r\n        fingerprint,\r\n        maxMessageSize,\r\n        candidates\r\n    };\r\n}\r\nexport function compressSDP(desc: RTCSessionDescriptionInit){\r\n    return bufToString(crunchSDP(deflateSDP(desc)));\r\n}\r\nexport function decompressSDP(str: string){\r\n    return inflateSDP(expandSDP(stringToBuf(str)));\r\n}\r\n","import { useEffect, useRef, useState } from 'react';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { compressSDP, decompressSDP } from './SDPMinimizer';\nimport * as sdp from 'sdp-transform';\n\nfunction stringify(val: any){\n    return JSON.stringify(val, null, '  ');\n}\nfunction idSDP(desc: RTCSessionDescriptionInit){\n    return decompressSDP(compressSDP(desc));\n}\n\nconst ICE_SERVERS = [{\n    urls: ['stun:stun.l.google.com:19302']\n}];\n\ninterface RTCEvents {\n    ready: (channel: RTCDataChannel) => void;\n    message: (data: any) => void;\n}\n\nclass RTC extends TypedEmitter<RTCEvents> {\n    private readonly conn: RTCPeerConnection;\n    channel?: RTCDataChannel;\n    mode: 'host' | 'client' | undefined;\n    public isReady: boolean;\n    public send: typeof RTCDataChannel.prototype.send;\n\n    constructor(iceServers: RTCIceServer[]){\n        super();\n\n        this.conn = new RTCPeerConnection({iceServers});\n        this.mode = undefined;\n        this.isReady = false;\n        this.send = () => { throw new Error(\"RTC connection not open yet\"); };\n    }\n\n    async initiate(): Promise<RTCSessionDescriptionInit> {\n        if(this.channel){\n            return Promise.reject(new Error(\"RTC connection already open\"));\n        }\n        if(this.mode){\n            return Promise.reject(new Error(\"RTC connection already initiated\"));\n        }\n        this.mode = 'host';\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            const chan = this.channel = conn.createDataChannel('test');\n            \n            chan.onopen = (evt) => {\n                this.isReady = true;\n                this.send = chan.send.bind(chan);\n                console.log('connection established');\n                this.emit('ready', chan);\n            };\n            chan.onmessage = (evt) => {\n                this.emit('message', evt.data);\n            };\n\n            conn.onicecandidate = (evt) => {\n                console.log('host ice candidate', evt.candidate);\n                if(!evt.candidate && conn.localDescription){\n                    console.log('offering', conn.localDescription.sdp);\n                    resolve(conn.localDescription);\n                }\n            };\n\n            conn.createOffer({})\n                .then(desc => conn.setLocalDescription(desc))\n                .catch(reject);\n        });\n    }\n\n    async answer(offer: RTCSessionDescriptionInit): Promise<RTCSessionDescriptionInit> {\n        if(this.channel){\n            return Promise.reject(new Error(\"RTC connection already open\"));\n        }\n        if(this.mode){\n            return Promise.reject(new Error(\"RTC connection already initiated\"));\n        }\n        this.mode = 'client';\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            conn.ondatachannel = (evt) => {\n                const chan = this.channel = evt.channel;\n                chan.onopen = (evt) => {\n                    this.isReady = true;\n                    this.send = chan.send.bind(chan);\n                    console.log('connection established');\n                    this.emit('ready', chan);\n                };\n                chan.onmessage = (evt) => {\n                    this.emit('message', evt.data);\n                };\n            };\n\n            conn.onicecandidate = (evt) => {\n                console.log('client ice candidate', evt.candidate);\n                if(!evt.candidate && conn.localDescription){\n                    console.log('answering with', conn.localDescription.sdp);\n                    resolve(conn.localDescription);\n                }\n            };\n\n            console.log('answering to', offer.sdp);\n            const desc = new RTCSessionDescription(offer);\n            conn.setRemoteDescription(desc);\n            conn.createAnswer({})\n                .then(answer => conn.setLocalDescription(answer))\n                .catch(reject);\n        });\n    }\n\n    async accept(answer: RTCSessionDescriptionInit): Promise<RTC> {\n        if(this.mode !== 'host'){\n            return Promise.reject(new Error(\"Can only accept an RTC answer as host\"));\n        }\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            console.log('accepting to', answer.sdp);\n            conn.setRemoteDescription(answer);\n            resolve(this);\n        });\n    }\n}\n\ninterface HostProps {\n}\nfunction AsHost(props: HostProps){\n    const [rtc] = useState(() => new RTC(ICE_SERVERS)),\n        refUrl = useRef<HTMLInputElement>(null),\n        refCode = useRef<HTMLInputElement>(null),\n        [localDesc, setLocalDesc] = useState<RTCSessionDescriptionInit | null>(null),\n        [remoteDesc, setRemoteDesc] = useState(''),\n        [errorMsg, setErrorMsg] = useState(''),\n        [isReady, setIsReady] = useState(rtc.isReady);\n\n    useEffect(() => {\n        if(isReady || rtc.isReady){\n            return;\n        }\n        rtc.initiate().then(offer => setLocalDesc(offer));\n    }, [rtc, isReady]);\n    useEffect(() => {\n        const handler = () => setIsReady(true);\n        rtc.on('ready', handler);\n        return () => void rtc.off('ready', handler);\n    }, [rtc]);\n    useEffect(() => {\n        if(!remoteDesc || rtc.isReady || isReady){\n            return;\n        }\n\n        try{\n            const desc = decompressSDP(remoteDesc);\n            rtc.accept(desc)\n                .catch(ex => {\n                    throw ex;\n                });\n        }catch(ex){\n            console.error(ex);\n            setErrorMsg(\"That was not a valid code, please try again\");\n            setRemoteDesc('');\n        }\n    }, [remoteDesc]);\n\n    function toURL(code: string){\n        const url = new URL(window.location.href)\n        url.hash = code;\n        return url.toString();\n    }\n\n    if(isReady){\n        return <Chat rtc={rtc} />;\n    }\n    return localDesc && (\n        <section style={{display: 'flex', flexFlow: 'row nowrap'}}>\n            <div style={{flex: '1'}}>\n                <p>Share this link with the person you want to talk to:</p>\n                <input\n                    ref={refUrl}\n                    type=\"text\" \n                    value={toURL(compressSDP(localDesc))}\n                    onClick={() => refUrl.current!.select()}\n                    onChange={() => {}} />\n                <button onClick={() => {\n                    refUrl.current!.select();\n                    document.execCommand('copy');\n                    refCode.current?.focus() }}>Copy</button>\n                <p>Paste their response code here:</p>\n                <input\n                    ref={refCode}\n                    type=\"text\"\n                    value={remoteDesc}\n                    onChange={(evt) => setRemoteDesc(evt.target.value)} />\n                { errorMsg && <p>{errorMsg}</p> }\n            </div>\n            <div style={{flex: '1'}}>\n                <pre>{ localDesc.sdp && stringify(sdp.parse(localDesc.sdp)) }</pre>\n                <pre>{ localDesc.sdp && localDesc.sdp }</pre>\n            </div>\n            <div style={{flex: '1'}}>\n                <pre>{ localDesc.sdp && stringify(sdp.parse(idSDP(localDesc).sdp!)) }</pre>\n                <pre>{ localDesc.sdp && idSDP(localDesc).sdp }</pre>\n            </div>\n        </section>\n    );\n}\n\ninterface ClientProps {\n    code: string;\n}\nfunction AsClient(props: ClientProps){\n    const [rtc] = useState(() => new RTC(ICE_SERVERS)),\n        {code} = props,\n        refCode = useRef<HTMLInputElement>(null),\n        [localDesc, setLocalDesc] = useState<RTCSessionDescriptionInit | null>(null),\n        [isReady, setIsReady] = useState(rtc.isReady);\n\n    useEffect(() => {\n        const handler = () => setIsReady(true);\n        rtc.on('ready', handler);\n        return () => void rtc.off('ready', handler);\n    }, [rtc]);\n    useEffect(() => {\n        if(isReady || rtc.isReady){\n            return;\n        }\n        rtc.answer(decompressSDP(code)).then(desc => setLocalDesc(desc));\n    }, [code, isReady]);\n\n    if(isReady){\n        return <Chat rtc={rtc} />;\n    }\n    return localDesc && (\n        <section style={{display: 'flex', flexFlow: 'row nowrap'}}>\n            <div style={{flex: '1'}}>\n                <p>Send this code back to the person that sent you here:</p>\n                <input\n                    ref={refCode}\n                    type=\"text\"\n                    value={compressSDP(localDesc)}\n                    onChange={() => {}}\n                    onClick={() => refCode.current!.select()} />\n                <button onClick={() => { refCode.current!.select(); document.execCommand('copy'); }}>Copy</button>\n            </div>\n            <div style={{flex: '1'}}>\n                <pre>{ localDesc.sdp && stringify(sdp.parse(localDesc.sdp)) }</pre>\n                <pre>{ localDesc.sdp && localDesc.sdp }</pre>\n            </div>\n            <div style={{flex: '1'}}>\n                <pre>{ localDesc.sdp && stringify(sdp.parse(idSDP(localDesc).sdp!)) }</pre>\n                <pre>{ localDesc.sdp && idSDP(localDesc).sdp }</pre>\n            </div>\n        </section>\n    );\n}\n\nfunction localDate(d: Date){\n    function fix(n: number){\n        return ('' + n).padStart(2, '0');\n    }\n    return d.getFullYear() + '-' +\n        fix(d.getMonth()) + '-' +\n        fix(d.getDate()) + ' ' +\n        fix(d.getHours()) + ':' +\n        fix(d.getMinutes()) + ':' +\n        fix(d.getSeconds());\n}\n\ninterface ChatMessage {\n    name: string;\n    message: string;\n    time: Date;\n    rando: number;\n}\n\ninterface ChatProps {\n    rtc: RTC;\n}\nfunction Chat(props: ChatProps){\n    const {rtc} = props,\n        [log, setLog] = useState<ChatMessage[]>(() => [{\n            name: 'System',\n            message: \"You can now talk to each other!\",\n            time: new Date(),\n            rando: Math.random()\n        }]),\n        [nextMessage, setNextMessage] = useState(''),\n        refLastLog = useRef<HTMLDivElement>(null),\n        refTxtInput = useRef<HTMLInputElement>(null);\n    \n    useEffect(() => {\n        window.location.hash = '';\n    }, []);\n    useEffect(() => {\n        function addMessage(data: any){\n            const msg = JSON.parse(data, (key, val) => key === 'time' ? new Date(val) : val);\n            setLog(log => [...log, {...msg, name: 'Them'}]);\n        }\n        rtc.on('message', addMessage);\n        return () => void rtc.off('message', addMessage);\n    }, [rtc])\n    useEffect(() => {\n        function addError(evt: Event){\n            console.error('channel error', evt);\n            setLog(log => [...log, {\n                name: 'System',\n                message: \"RTC error: \",\n                time: new Date(),\n                rando: Math.random()\n            }]);\n        }   \n\n        if(!rtc.channel){\n            return;\n        }\n        rtc.channel.onerror = addError;\n    }, [rtc.channel]);\n    useEffect(() => {\n        if(refTxtInput.current){\n            refTxtInput.current.focus();\n        }\n    }, [refTxtInput.current]);\n    useEffect(() => {\n        if(refLastLog.current){\n            refLastLog.current.scrollIntoView();\n        }\n    }, [log]);\n\n    function send(){\n        const msg = {\n            name: 'You',\n            message: nextMessage,\n            time: new Date(),\n            rando: Math.random()\n        };\n\n        rtc.send(JSON.stringify(msg));\n        setLog(log => [...log, msg]);\n        setNextMessage('');\n    }\n\n    return (\n        <section style={{height: '100%', width: '100%', maxWidth: '600px', display: 'flex', flexFlow: 'column nowrap', justifyContent: 'flex-end'}}>\n            <div style={{flex: '1', display: 'flex', flexFlow: 'column nowrap', justifyContent: 'flex-end'}}>\n                { log.map(msg => <p\n                    style={{margin: '0.5em 0.5em', wordBreak: 'break-all', textIndent: '-1em', paddingLeft: '1em'}}\n                    ref={refLastLog}\n                    key={msg.time.toISOString() + '' + msg.rando}>\n                        <em>{localDate(msg.time)}</em>&nbsp;\n                        <strong>{msg.name}</strong>:&nbsp;\n                        {msg.message}\n                </p>) }\n            </div>\n            <div style={{flex: '0', display: 'flex'}}>\n                <input\n                    style={{margin: '0.5em 0.25em 0.5em 0.25em', flex: '10'}}\n                    ref={refTxtInput}\n                    type=\"text\"\n                    value={nextMessage}\n                    onChange={(evt) => setNextMessage(evt.target.value)}\n                    onKeyUp={(evt) => evt.key === 'Enter' && send()} />\n                <button style={{margin: '0.5em 0.5em 0.5em 0.25em', flex: '0'}} onClick={send}>Send</button>\n            </div>\n        </section>\n    );\n}\n\nfunction App() {\n    const [code] = useState(window.location.hash.substr(1));\n\n    if(code && code.length){\n        return <AsClient code={decodeURIComponent(code)} />\n    }\n    return <AsHost />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}