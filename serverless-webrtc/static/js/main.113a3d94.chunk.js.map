{"version":3,"sources":["SDPMinimizer.ts","App.tsx","index.tsx"],"names":["dvSetString","dv","off","str","length","Error","setUint8","i","chr","charCodeAt","charAt","dvSetBuffer","buf","vd","DataView","byteLength","getUint8","dvGetString","len","ret","String","fromCharCode","compressSDP","desc","obj","sessionVersion","candidates","map","c","foundation","isNaN","havePort","port","isRtcp","component","isTcp","transport","isSrflx","type","isTcpActive","tcptype","ip","raddr","buffer","ArrayBuffer","view","setUint32","setUint16","rport","sessionId","protocol","shortProtocol","toUpperCase","fingerprint","split","hex","parseInt","iceFrag","iceUfrag","icePwd","reduce","a","b","maxMessageSize","crunchSDP","sdp","origin","media","m","fp","sort","priority","idx","toLowerCase","undefined","hash","deflateSDP","base2048","Uint8Array","decompressSDP","head","numCandidates","getUint16","Array","fill","_","toString","padStart","join","whichProtocol","cand","getUint32","push","expandSDP","stringToBuf","version","username","netType","ipVer","address","name","timing","start","stop","groups","mids","msidSemantic","semantic","token","direction","rtp","fmtp","payloads","connection","endOfCandidates","iceOptions","setup","stcpPort","mid","ICE_SERVERS","urls","RTC","iceServers","conn","chan","mode","isReady","send","RTCPeerConnection","this","Promise","reject","resolve","createDataChannel","onopen","evt","bind","emit","onmessage","data","onicecandidate","candidate","localDescription","createOffer","then","setLocalDescription","catch","offer","ondatachannel","channel","RTCSessionDescription","setRemoteDescription","createAnswer","answer","TypedEmitter","AsHost","props","useState","rtc","refUrl","useRef","refCode","localDesc","setLocalDesc","remoteDesc","setRemoteDesc","errorMsg","setErrorMsg","setIsReady","useEffect","initiate","handler","on","accept","ex","console","error","Chat","ref","value","code","url","URL","window","location","href","toURL","onClick","current","select","onChange","document","execCommand","focus","target","AsClient","localDate","d","fix","n","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","message","time","Date","rando","Math","random","log","setLog","nextMessage","setNextMessage","refLastLog","refTxtInput","msg","JSON","stringify","addMessage","parse","key","val","scrollIntoView","style","height","width","maxWidth","display","flexFlow","justifyContent","flex","margin","wordBreak","textIndent","paddingLeft","toISOString","onKeyUp","App","substr","decodeURIComponent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.113a3d94.chunk.js","sourcesContent":["import * as sdp from 'sdp-transform';\r\nimport * as base2048 from 'base2048';\r\n\r\nfunction bufToString(buf: ArrayBuffer){\r\n    //return btoa(String.fromCharCode(...new Uint8Array(buf)));\r\n    return base2048.encode(new Uint8Array(buf));\r\n}\r\nfunction stringToBuf(str: string){\r\n    //return Uint8Array.from(atob(str), c => c.charCodeAt(0)).buffer;\r\n    return base2048.decode(str).buffer;\r\n}\r\nfunction dvSetString(dv: DataView, off: number, str: string){\r\n    if(str.length > 255){\r\n        throw new Error(\"String too long: \" + str.length);\r\n    }\r\n    dv.setUint8(off, str.length);\r\n    for(let i = 0; i < str.length; i++){\r\n        const chr = str.charCodeAt(i);\r\n        if(chr > 255){\r\n            throw new Error(\"Not an ASCII character: \" + str.charAt(i));\r\n        }\r\n        dv.setUint8(off + 1 + i, chr);\r\n    }\r\n    return off + 1 + str.length;\r\n}\r\nfunction dvSetBuffer(dv: DataView, off: number, buf: ArrayBuffer){\r\n    const vd = new DataView(buf);\r\n    for(let i = 0; i < buf.byteLength; i++){\r\n        dv.setUint8(off + i, vd.getUint8(i));\r\n    }\r\n    return off + buf.byteLength;\r\n}\r\nfunction dvGetString(dv: DataView, off: number){\r\n    const len = dv.getUint8(off);\r\n    let ret = '';\r\n    for(let i = 0; i < len; i++){\r\n        const chr = dv.getUint8(off + 1 + i);\r\n        ret += String.fromCharCode(chr);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport interface MinimumSDP {\r\n    type: 'offer' | 'answer';\r\n    sessionId: string;\r\n    sessionVersion: number;\r\n    port: number;\r\n    protocol: string;\r\n    candidates: {\r\n        foundation: number;\r\n        component: 1 | 2;\r\n        transport: \"tcp\" | \"udp\";\r\n        ip: string;\r\n        port?: number;\r\n        type: 'host' | 'srflx';\r\n        raddr?: string;\r\n        rport?: number;\r\n        tcptype?: 'active' | 'passive'\r\n    }[];\r\n    iceUfrag: string;\r\n    icePwd: string;\r\n    fingerprint: string;\r\n    maxMessageSize: number;\r\n}\r\n\r\nexport function deflateSDP(desc: RTCSessionDescriptionInit): MinimumSDP {\r\n    if(!desc.sdp){\r\n        throw new Error(\"No SDP\");\r\n    }\r\n    if(desc.type !== 'answer' && desc.type !== 'offer'){\r\n        throw new Error(\"Unexpected RTC init type: \" + desc.type);\r\n    }\r\n    const obj = sdp.parse(desc.sdp);\r\n    if(!obj.origin){\r\n        throw new Error(\"Incomplete SDP: no origin\");\r\n    }\r\n    if(!obj.media || !obj.media.length){\r\n        throw new Error(\"Incomplete SDP: no/zero-length media\");\r\n    }\r\n    if(obj.media.length > 1){\r\n        throw new Error(\"Too much SDP: more than 1 media\");\r\n    }\r\n    const m = obj.media[0],\r\n        fp = m.fingerprint || obj.fingerprint;\r\n    if(!m.candidates){\r\n        throw new Error(\"Incomplete SDP.media: no candidates\");\r\n    }\r\n    if(!fp){\r\n        throw new Error(\"Incomplete SDP: no fingerprint\");\r\n    }\r\n    if(fp.type !== 'sha-256'){\r\n        throw new Error(\"Unexpected fingerprint type: \" + fp.type);\r\n    }\r\n    if(!m.iceUfrag){\r\n        throw new Error(\"Incomplete SDP: no ice-ufrag\");\r\n    }\r\n    if(!m.icePwd){\r\n        throw new Error(\"Incomplete SDP: no ice-pwd\");\r\n    }\r\n    return {\r\n        type: desc.type,\r\n        sessionId: ''+obj.origin.sessionId,\r\n        sessionVersion: obj.origin.sessionVersion,\r\n        port: m.port,\r\n        protocol: m.protocol,\r\n        candidates: m.candidates.sort((a, b) => (+a.priority) - (+b.priority)).map((c, idx) => {\r\n            if(c.component !== 1 && c.component !== 2){\r\n                throw new Error(\"Unexpected value for candidate component: \" + c.component);\r\n            }\r\n            const transport = c.transport.toLowerCase();\r\n            if(transport !== 'tcp' && transport !== 'udp'){\r\n                throw new Error(\"Unexpected value for candidate transport: \" + c.transport);\r\n            }\r\n            if(c.type !== 'host' && c.type !== 'srflx'){\r\n                throw new Error(\"Unexpected value for candidate type: \" + c.type);\r\n            }\r\n            if(c.tcptype !== undefined && c.tcptype !== 'active' && c.tcptype !== 'passive'){\r\n                throw new Error(\"Unexpected value for candidate tcp-type: \" + c.tcptype);\r\n            }\r\n            return {\r\n                foundation: +c.foundation,\r\n                component: c.component,\r\n                transport: transport,\r\n                ip: c.ip,\r\n                port: c.port === m.port ? undefined : c.port,\r\n                type: c.type,\r\n                raddr: c.raddr,\r\n                rport: c.rport,\r\n                tcptype: c.tcptype as 'active' | 'passive' | undefined\r\n            };\r\n        }),\r\n        iceUfrag: m.iceUfrag,\r\n        icePwd: m.icePwd,\r\n        fingerprint: fp.hash,\r\n        // @ts-ignore: m.maxMessageSize does exist\r\n        maxMessageSize: m.maxMessageSize\r\n    }\r\n}\r\nexport function crunchSDP(obj: MinimumSDP){\r\n    if(obj.sessionVersion > 7){\r\n        throw new Error(\"sessionVersion too high: \" + obj.sessionVersion);\r\n    }\r\n    if(obj.candidates.length > 15){\r\n        throw new Error(\"Too many candidates: \" + obj.candidates.length);\r\n    }\r\n    const candidates = obj.candidates.map(c => {\r\n        const foundation = +c.foundation;\r\n        if(isNaN(foundation) || foundation > 2**32 - 1){\r\n            throw new Error(\"Foundation too big: \" + c.foundation);\r\n        }\r\n        const havePort = !!c.port,\r\n            isRtcp = c.component === 2,\r\n            isTcp = c.transport === 'tcp',\r\n            isSrflx = c.type === 'srflx',\r\n            isTcpActive = c.tcptype === 'active',\r\n            len = 1 + 4 + (c.ip.length + 1) +\r\n                (+havePort ? 2 : 0) +\r\n                (isSrflx ? (c.raddr!.length + 1) + 2 : 0),\r\n            buffer = new ArrayBuffer(len),\r\n            view = new DataView(buffer);\r\n        view.setUint8(0, +havePort | (+isRtcp << 1) | (+isTcp << 2) | (+isSrflx << 3) | (+isTcpActive << 4));\r\n        view.setUint32(1, foundation);\r\n        let off = dvSetString(view, 5, c.ip);\r\n        if(c.port){\r\n            view.setUint16(off, c.port);\r\n            off += 2;\r\n        }\r\n        if(isSrflx){\r\n            off = dvSetString(view, off, c.raddr!);\r\n            view.setUint16(off, c.rport!);\r\n        }\r\n\r\n        return buffer;\r\n    });\r\n    const sessionId = '' + obj.sessionId,\r\n        protocol = '' + obj.protocol,\r\n        shortProtocol = protocol.toUpperCase() === \"UDP/DTLS/SCTP\" || protocol.toUpperCase() === \"TCP/DTLS/SCTP\",\r\n        fingerprint = obj.fingerprint.split(':').map(hex => parseInt(hex, 16)),\r\n        iceFrag = obj.iceUfrag,\r\n        icePwd = obj.icePwd,\r\n        len = 1 + 2 + 32 + 2 + \r\n            sessionId.length + 1 + \r\n            (+!shortProtocol * protocol.length) + 1 + \r\n            iceFrag.length + 1 + \r\n            icePwd.length + 1 +\r\n            candidates.reduce((a, c) => a + c.byteLength, 0),\r\n        buffer = new ArrayBuffer(len),\r\n        view = new DataView(buffer);\r\n    view.setUint8(0, +(obj.type === 'answer') | ((obj.sessionVersion & 7) << 1) | ((candidates.length & 15) << 4));\r\n    view.setUint16(1, obj.port);\r\n    let off = 3;\r\n    for(const b of fingerprint){\r\n        view.setUint8(off++, b);\r\n    }\r\n    view.setUint16(off, obj.maxMessageSize);\r\n    off += 2;\r\n    off = dvSetString(view, off, sessionId);\r\n    if(protocol.toUpperCase() === \"UDP/DTLS/SCTP\"){\r\n        view.setUint8(off, 0);\r\n        off += 1;\r\n    }else if(protocol.toUpperCase() === \"TCP/DTLS/SCTP\"){\r\n        view.setUint8(off, 1);\r\n        off += 1;\r\n    }else{\r\n        off = dvSetString(view, off, protocol);\r\n    }\r\n    off = dvSetString(view, off, iceFrag);\r\n    off = dvSetString(view, off, icePwd);\r\n    for(const can of candidates){\r\n        off = dvSetBuffer(view, off, can);\r\n    }\r\n\r\n    return buffer;\r\n}\r\nexport function inflateSDP(obj: MinimumSDP): RTCSessionDescriptionInit {\r\n    return {\r\n        type: obj.type,\r\n        sdp: sdp.write({\r\n            version: 0,\r\n            origin: {\r\n                username: \"-\",\r\n                sessionId: obj.sessionId,\r\n                sessionVersion: obj.sessionVersion,\r\n                netType: 'IN',\r\n                ipVer: 4,\r\n                address: '127.0.0.1'\r\n            },\r\n            name: '-',\r\n            timing: {\r\n                start: 0,\r\n                stop: 0\r\n            },\r\n            groups: [{\r\n                type: 'BUNDLE',\r\n                mids: '0'\r\n            }],\r\n            msidSemantic: {\r\n                semantic: '',\r\n                token: 'WMS'\r\n            },\r\n            media: [{\r\n                direction: 'sendrecv',\r\n                rtp: [],\r\n                fmtp: [],\r\n                type: 'application',\r\n                port: obj.port,\r\n                protocol: obj.protocol,\r\n                payloads: 'webrtc-datachannel',\r\n                connection: {\r\n                    version: 4,\r\n                    ip: '127.0.0.1'\r\n                },\r\n                candidates: obj.candidates.map((c, idx) => ({\r\n                    foundation: '' + c.foundation,\r\n                    component: c.component,\r\n                    transport: c.transport,\r\n                    priority: idx,\r\n                    ip: c.ip,\r\n                    port: c.port ?? obj.port,\r\n                    type: c.type,\r\n                    raddr: c.raddr ?? undefined,\r\n                    rport: c.rport ?? undefined,\r\n                    tcptype: c.transport === 'tcp' ? c.tcptype : undefined\r\n                })),\r\n                endOfCandidates: 'end-of-candidates',\r\n                iceUfrag: obj.iceUfrag,\r\n                icePwd: obj.icePwd,\r\n                // @ts-ignore\r\n                iceOptions: 'trickle',\r\n                fingerprint: {\r\n                    type: 'sha-256',\r\n                    hash: obj.fingerprint\r\n                },\r\n                setup: obj.type === 'offer' ? 'actpass' : 'active',\r\n                stcpPort: 5000,\r\n                mid: '0',\r\n                maxMessageSize: obj.maxMessageSize\r\n            }],\r\n        })+'a=sctp-port:5000\\r\\n'\r\n    };\r\n}\r\nexport function expandSDP(buf: ReturnType<typeof crunchSDP>): MinimumSDP {\r\n    /*\r\n    ( type: 1 bit: 'offer' | 'answer'\r\n    sessionVersion: 3 bits\r\n    numCandidates: 4 bits ) : 1 byte\r\n    port: 2 bytes (uint16)\r\n    fingerprint: 32 bytes\r\n    maxMessageSize: 2 bytes (uint16)\r\n    sessionId: string: length+1 bytes\r\n    protocol: 1 byte (0 | 1) | string: length+1 bytes\r\n    iceFrag: string: length+1 bytes\r\n    icePwd: string: length+1 bytes\r\n    candidates: [\r\n        ( havePort: 1 bit\r\n        component: 1 bit: 1 | 2\r\n        transport: 1 bit: 'UDP' | 'TCP'\r\n        type: 1 bit: 'host' | 'srflx'\r\n        tcptype: 1 bit: 'active' | 'passive' ): 1 byte\r\n        foundation: 4 bytes (uint32)\r\n        ip: string: length+1 bytes\r\n        port: 0 | 2 bytes\r\n        raddr: 0 | string: length+1 bytes\r\n        rport: 0 | 2 bytes (uint16)\r\n    ]\r\n    */\r\n    let off = 0;\r\n    const view = new DataView(buf),\r\n        head = view.getUint8(off++),\r\n        type = (head & 1) ? 'answer' : 'offer',\r\n        sessionVersion = (head >> 1) & 7,\r\n        numCandidates = (head >> 4) & 15,\r\n        port = view.getUint16(1);\r\n    off += 2;\r\n    const fingerprint = new Array(32).fill(0).map((_, idx) => view.getUint8(off + idx).toString(16).padStart(2, '0').toUpperCase()).join(':');\r\n    off += 32;\r\n    const maxMessageSize = view.getUint16(off);\r\n    off += 2;\r\n    const sessionId = dvGetString(view, off);\r\n    off += sessionId.length + 1;\r\n    const whichProtocol = view.getUint8(off);\r\n    let protocol = undefined;\r\n    if(whichProtocol === 0){\r\n        protocol = \"UDP/DTLS/SCTP\";\r\n        off++;\r\n    }else if(whichProtocol === 1){\r\n        protocol = \"TCP/DTLS/SCTP\";\r\n        off++;\r\n    }else{\r\n        protocol = dvGetString(view, off);\r\n        off += protocol.length + 1;\r\n    }\r\n    const iceUfrag = dvGetString(view, off);\r\n    off += iceUfrag.length + 1;\r\n    const icePwd = dvGetString(view, off);\r\n    off += icePwd.length + 1;\r\n\r\n    const candidates: MinimumSDP['candidates'] = [];\r\n    for(let i = 0; i < numCandidates; i++){\r\n        const cand: Partial<MinimumSDP['candidates'][0]> = {},\r\n            head = view.getUint8(off++),\r\n            havePort = head & 1;\r\n        cand.component = (head >> 1) & 1 ? 2 : 1;\r\n        cand.transport = (head >> 2) & 1 ? 'tcp' : 'udp';\r\n        cand.type = (head >> 3) & 1 ? 'srflx' : 'host';\r\n        cand.tcptype = (head >> 4) & 1 ? 'passive' : 'active';\r\n        cand.foundation = view.getUint32(off);\r\n        off += 4;\r\n        cand.ip = dvGetString(view, off);\r\n        off += cand.ip.length + 1;\r\n        if(havePort){\r\n            cand.port = view.getUint16(off);\r\n            off += 2;\r\n        }\r\n        if(cand.type === 'srflx'){\r\n            cand.raddr = dvGetString(view, off);\r\n            off += cand.raddr.length + 1;\r\n            cand.rport = view.getUint16(off);\r\n            off += 2;\r\n        }\r\n\r\n        candidates.push(cand as typeof candidates[0]);\r\n    }\r\n\r\n    return {\r\n        type,\r\n        sessionId,\r\n        sessionVersion,\r\n        port,\r\n        protocol,\r\n        iceUfrag,\r\n        icePwd,\r\n        fingerprint,\r\n        maxMessageSize,\r\n        candidates\r\n    };\r\n}\r\nexport function compressSDP(desc: RTCSessionDescriptionInit){\r\n    return bufToString(crunchSDP(deflateSDP(desc)));\r\n}\r\nexport function decompressSDP(str: string){\r\n    return inflateSDP(expandSDP(stringToBuf(str)));\r\n}\r\n","import { useEffect, useRef, useState } from 'react';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { compressSDP, decompressSDP } from './SDPMinimizer';\n\nconst ICE_SERVERS = [{\n    urls: ['stun:stun.l.google.com:19302']\n}];\n\ninterface RTCEvents {\n    ready: (channel: RTCDataChannel) => void;\n    message: (data: any) => void;\n}\n\nclass RTC extends TypedEmitter<RTCEvents> {\n    private readonly conn: RTCPeerConnection;\n    private chan?: RTCDataChannel;\n    mode: 'host' | 'client' | undefined;\n    public isReady: boolean;\n    public send: typeof RTCDataChannel.prototype.send;\n\n    constructor(iceServers: RTCIceServer[]){\n        super();\n\n        this.conn = new RTCPeerConnection({iceServers});\n        this.mode = undefined;\n        this.isReady = false;\n        this.send = () => { throw new Error(\"RTC connection not open yet\"); };\n    }\n\n    async initiate(): Promise<RTCSessionDescriptionInit> {\n        if(this.chan){\n            return Promise.reject(new Error(\"RTC connection already open\"));\n        }\n        if(this.mode){\n            return Promise.reject(new Error(\"RTC connection already initiated\"));\n        }\n        this.mode = 'host';\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            const chan = this.chan = conn.createDataChannel('test');\n            \n            chan.onopen = (evt) => {\n                this.isReady = true;\n                this.send = chan.send.bind(chan);\n                this.emit('ready', chan);\n            };\n            chan.onmessage = (evt) => {\n                this.emit('message', evt.data);\n            };\n\n            conn.onicecandidate = (evt) => {\n                if(!evt.candidate && conn.localDescription){\n                    resolve(conn.localDescription);\n                }\n            };\n\n            conn.createOffer({})\n                .then(desc => conn.setLocalDescription(desc))\n                .catch(reject);\n        });\n    }\n\n    async answer(offer: RTCSessionDescriptionInit): Promise<RTCSessionDescriptionInit> {\n        if(this.chan){\n            return Promise.reject(new Error(\"RTC connection already open\"));\n        }\n        if(this.mode){\n            return Promise.reject(new Error(\"RTC connection already initiated\"));\n        }\n        this.mode = 'client';\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            conn.ondatachannel = (evt) => {\n                const chan = this.chan = evt.channel;\n                chan.onopen = (evt) => {\n                    this.isReady = true;\n                    this.send = chan.send.bind(chan);\n                    this.emit('ready', chan);\n                };\n                chan.onmessage = (evt) => {\n                    this.emit('message', evt.data);\n                };\n            };\n\n            conn.onicecandidate = (evt) => {\n                if(!evt.candidate && conn.localDescription){\n                    resolve(conn.localDescription);\n                }\n            };\n\n            const desc = new RTCSessionDescription(offer);\n            conn.setRemoteDescription(desc);\n            conn.createAnswer({})\n                .then(answer => conn.setLocalDescription(answer))\n                .catch(reject);\n        });\n    }\n\n    async accept(answer: RTCSessionDescriptionInit): Promise<RTC> {\n        if(this.mode !== 'host'){\n            return Promise.reject(new Error(\"Can only accept an RTC answer as host\"));\n        }\n\n        const conn = this.conn;\n        return new Promise((resolve, reject) => {\n            conn.setRemoteDescription(answer);\n            resolve(this);\n        });\n    }\n}\n\ninterface HostProps {\n}\nfunction AsHost(props: HostProps){\n    const [rtc] = useState(() => new RTC(ICE_SERVERS)),\n        refUrl = useRef<HTMLInputElement>(null),\n        refCode = useRef<HTMLInputElement>(null),\n        [localDesc, setLocalDesc] = useState<RTCSessionDescriptionInit | null>(null),\n        [remoteDesc, setRemoteDesc] = useState(''),\n        [errorMsg, setErrorMsg] = useState(''),\n        [isReady, setIsReady] = useState(rtc.isReady);\n\n    useEffect(() => {\n        if(isReady || rtc.isReady){\n            return;\n        }\n        rtc.initiate().then(offer => setLocalDesc(offer));\n    }, [rtc, isReady]);\n    useEffect(() => {\n        const handler = () => setIsReady(true);\n        rtc.on('ready', handler);\n        return () => (rtc.off('ready', handler), void 0);\n    }, [rtc]);\n    useEffect(() => {\n        if(!remoteDesc || rtc.isReady || isReady){\n            return;\n        }\n\n        try{\n            const desc = decompressSDP(remoteDesc);\n            rtc.accept(desc);\n        }catch(ex){\n            console.error(ex);\n            setErrorMsg(\"That was not a valid code, please try again\");\n            setRemoteDesc('');\n        }\n    }, [remoteDesc]);\n\n    function toURL(code: string){\n        const url = new URL(window.location.href)\n        url.hash = code;\n        return url.toString();\n    }\n\n    if(isReady){\n        return <Chat rtc={rtc} />;\n    }\n    return localDesc && (\n        <section>\n            <p>Share this link with the person you want to talk to:</p>\n            <input\n                ref={refUrl}\n                type=\"text\" \n                value={toURL(compressSDP(localDesc))}\n                onClick={() => refUrl.current!.select()}\n                onChange={() => {}} />\n            <button onClick={() => {\n                refUrl.current!.select();\n                document.execCommand('copy');\n                refCode.current?.focus() }}>Copy</button>\n            <p>Paste their response code here:</p>\n            <input\n                ref={refCode}\n                type=\"text\"\n                value={remoteDesc}\n                onChange={(evt) => setRemoteDesc(evt.target.value)} />\n            { errorMsg && <p>{errorMsg}</p> }\n        </section>\n    );\n}\n\ninterface ClientProps {\n    code: string;\n}\nfunction AsClient(props: ClientProps){\n    const [rtc] = useState(() => new RTC(ICE_SERVERS)),\n        {code} = props,\n        refCode = useRef<HTMLInputElement>(null),\n        [localDesc, setLocalDesc] = useState<RTCSessionDescriptionInit | null>(null),\n        [isReady, setIsReady] = useState(rtc.isReady);\n\n    useEffect(() => {\n        const handler = () => setIsReady(true);\n        rtc.on('ready', handler);\n        return () => (rtc.off('ready', handler), void 0);\n    }, [rtc]);\n    useEffect(() => {\n        if(isReady || rtc.isReady){\n            return;\n        }\n        rtc.answer(decompressSDP(code)).then(desc => setLocalDesc(desc));\n    }, [code, isReady]);\n\n    if(isReady){\n        return <Chat rtc={rtc} />;\n    }\n    return localDesc && (\n        <section>\n            <p>Send this code back to the person that sent you here:</p>\n            <input\n                ref={refCode}\n                type=\"text\"\n                value={compressSDP(localDesc)}\n                onChange={() => {}}\n                onClick={() => refCode.current!.select()} />\n            <button onClick={() => { refCode.current!.select(); document.execCommand('copy'); }}>Copy</button>\n        </section>\n    );\n}\n\nfunction localDate(d: Date){\n    function fix(n: number){\n        return ('' + n).padStart(2, '0');\n    }\n    return d.getFullYear() + '-' +\n        fix(d.getMonth()) + '-' +\n        fix(d.getDate()) + ' ' +\n        fix(d.getHours()) + ':' +\n        fix(d.getMinutes()) + ':' +\n        fix(d.getSeconds());\n}\n\ninterface ChatMessage {\n    name: string;\n    message: string;\n    time: Date;\n    rando: number;\n}\n\ninterface ChatProps {\n    rtc: RTC;\n}\nfunction Chat(props: ChatProps){\n    const {rtc} = props,\n        [log, setLog] = useState<ChatMessage[]>(() => [{\n            name: 'System',\n            message: \"You can now talk to each other!\",\n            time: new Date,\n            rando: Math.random()\n        }]),\n        [nextMessage, setNextMessage] = useState(''),\n        refLastLog = useRef<HTMLDivElement>(null),\n        refTxtInput = useRef<HTMLInputElement>(null);\n    \n    useEffect(() => {\n        window.location.hash = '';\n    }, []);\n    useEffect(() => {\n        function addMessage(data: any){\n            const msg = JSON.parse(data, (key, val) => key === 'time' ? new Date(val) : val);\n            setLog(log => [...log, {...msg, name: 'Them'}]);\n        }\n        rtc.on('message', addMessage);\n        return () => (rtc.off('message', addMessage), void 0);\n    }, [rtc])\n    useEffect(() => {\n        if(refTxtInput.current){\n            refTxtInput.current.focus();\n        }\n    }, [refTxtInput.current]);\n    useEffect(() => {\n        if(refLastLog.current){\n            refLastLog.current.scrollIntoView();\n        }\n    }, [refLastLog.current, log]);\n\n    function send(){\n        const msg = {\n            name: 'You',\n            message: nextMessage,\n            time: new Date(),\n            rando: Math.random()\n        };\n\n        rtc.send(JSON.stringify(msg));\n        setLog(log => [...log, msg]);\n        setNextMessage('');\n    }\n\n    return (\n        <section style={{height: '100%', width: '100%', maxWidth: '600px', display: 'flex', flexFlow: 'column nowrap', justifyContent: 'flex-end'}}>\n            <div style={{flex: '1', display: 'flex', flexFlow: 'column nowrap', justifyContent: 'flex-end'}}>\n                { log.map(msg => <p\n                    style={{margin: '0.5em 0.5em', wordBreak: 'break-all', textIndent: '-1em', paddingLeft: '1em'}}\n                    ref={refLastLog}\n                    key={msg.time.toISOString() + '' + msg.rando}>\n                        <em>{localDate(msg.time)}</em>&nbsp;\n                        <strong>{msg.name}</strong>:&nbsp;\n                        {msg.message}\n                </p>) }\n            </div>\n            <div style={{flex: '0', display: 'flex'}}>\n                <input\n                    style={{margin: '0.5em 0.25em 0.5em 0.25em', flex: '10'}}\n                    ref={refTxtInput}\n                    type=\"text\"\n                    value={nextMessage}\n                    onChange={(evt) => setNextMessage(evt.target.value)}\n                    onKeyUp={(evt) => evt.key === 'Enter' && send()} />\n                <button style={{margin: '0.5em 0.5em 0.5em 0.25em', flex: '0'}} onClick={send}>Send</button>\n            </div>\n        </section>\n    );\n}\n\nfunction App() {\n    const [code] = useState(window.location.hash.substr(1));\n\n    if(code && code.length){\n        return <AsClient code={decodeURIComponent(code)} />\n    }\n    return <AsHost />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}